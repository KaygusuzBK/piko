'use client'

import { useState } from 'react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { Button } from '@/components/ui/button'
import { Sparkles, Loader2 } from 'lucide-react'

interface AISuggestionsProps {
  onSuggestionSelect: (suggestion: string) => void
  currentContent?: string
}

const SUGGESTION_PROMPTS = [
  { label: 'Teknoloji Trendi', prompt: 'teknoloji ve yapay zeka hakkƒ±nda ilgin√ß bir g√∂nderi' },
  { label: 'Motivasyon', prompt: 'motivasyonel ve ilham verici bir g√∂nderi' },
  { label: 'G√ºnl√ºk D√º≈ü√ºnce', prompt: 'g√ºnl√ºk hayat hakkƒ±nda d√º≈ü√ºnd√ºr√ºc√º bir g√∂nderi' },
  { label: 'Eƒülenceli', prompt: 'eƒülenceli ve komik bir g√∂nderi' },
  { label: 'Profesyonel', prompt: 'profesyonel ve i≈ü d√ºnyasƒ± hakkƒ±nda bir g√∂nderi' },
  { label: 'Soru Sor', prompt: 'takip√ßilere y√∂nelik ilgin√ß bir soru' },
]

export function AISuggestions({ onSuggestionSelect, currentContent }: AISuggestionsProps) {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const generateSuggestion = async (prompt: string) => {
    setLoading(true)
    setError(null)

    try {
      // Simulated AI response - In production, this would call an AI API
      // For now, we'll generate contextual suggestions based on the prompt
      await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate API delay

      const suggestions: Record<string, string[]> = {
        'teknoloji ve yapay zeka hakkƒ±nda ilgin√ß bir g√∂nderi': [
          'ü§ñ Yapay zeka artƒ±k sadece bir trend deƒüil, hayatƒ±mƒ±zƒ±n bir par√ßasƒ±. Sizce AI\'nƒ±n geleceƒüi nasƒ±l ≈üekillenecek?',
          'üí° Teknoloji hƒ±zla ilerliyor ama en √∂nemli soru: ƒ∞nsanlƒ±ƒüa nasƒ±l fayda saƒülayacak?',
          'üöÄ AI ile √ßalƒ±≈ümak, onu rakip olarak g√∂rmekten daha akƒ±llƒ±ca. Siz nasƒ±l kullanƒ±yorsunuz?'
        ],
        'motivasyonel ve ilham verici bir g√∂nderi': [
          '‚ú® Ba≈üarƒ±, her g√ºn k√º√ß√ºk adƒ±mlar atmaktan ge√ßer. Bug√ºn hangi adƒ±mƒ± attƒ±nƒ±z?',
          'üåü Hayalleriniz i√ßin √ßalƒ±≈ümak yorucu olabilir, ama deƒüer. Pes etmeyin!',
          'üí™ Zorluklarla kar≈üƒ±la≈ütƒ±ƒüƒ±nƒ±zda hatƒ±rlayƒ±n: Her zorluk, yeni bir fƒ±rsat demektir.'
        ],
        'g√ºnl√ºk hayat hakkƒ±nda d√º≈ü√ºnd√ºr√ºc√º bir g√∂nderi': [
          '‚òï Sabah kahvesi i√ßerken d√º≈ü√ºnd√ºm: K√º√ß√ºk anlar, b√ºy√ºk mutluluklar yaratƒ±yor.',
          'üåÖ Her yeni g√ºn, yeni bir ba≈ülangƒ±√ß. Bug√ºn√º nasƒ±l deƒüerlendiriyorsunuz?',
          'üì± Dijital d√ºnyada kaybolurken, ger√ßek anlarƒ± ka√ßƒ±rƒ±yor muyuz?'
        ],
        'eƒülenceli ve komik bir g√∂nderi': [
          'üòÑ Kahve i√ßmeden √∂nce: üò¥ Kahve i√ßtikten sonra: üöÄ Sizin s√ºper g√ºc√ºn√ºz ne?',
          'ü§î Neden \"Pazartesi sendromu\" var da \"Cuma co≈ükusu\" yok? Haksƒ±zlƒ±k!',
          'üíª Kod yazarken: \"Bu √ßalƒ±≈üacak!\" 5 dakika sonra: \"Neden √ßalƒ±≈ümƒ±yor?\" üòÖ'
        ],
        'profesyonel ve i≈ü d√ºnyasƒ± hakkƒ±nda bir g√∂nderi': [
          'üíº ƒ∞≈ü d√ºnyasƒ±nda ba≈üarƒ±nƒ±n sƒ±rrƒ±: S√ºrekli √∂ƒürenme ve adaptasyon. Siz nasƒ±l geli≈üiyorsunuz?',
          'üéØ Hedeflerinizi belirleyin, planƒ±nƒ±zƒ± yapƒ±n, harekete ge√ßin. Ba≈üarƒ± bu kadar basit!',
          'ü§ù Networking sadece kartvizit deƒüi≈üimi deƒüil, deƒüer yaratma sanatƒ±dƒ±r.'
        ],
        'takip√ßilere y√∂nelik ilgin√ß bir soru': [
          'ü§î Sizce gelecekte hangi teknoloji hayatƒ±mƒ±zƒ± en √ßok deƒüi≈ütirecek?',
          'üí≠ Eƒüer bir s√ºper g√ºc√ºn√ºz olsaydƒ±, hangisi olurdu ve neden?',
          'üìö Hayatƒ±nƒ±zƒ± deƒüi≈ütiren bir kitap var mƒ±? √ñnerir misiniz?'
        ]
      }

      const randomSuggestion = suggestions[prompt][Math.floor(Math.random() * suggestions[prompt].length)]
      
      // If there's current content, try to enhance it
      if (currentContent && currentContent.trim().length > 10) {
        onSuggestionSelect(`${currentContent}\n\n${randomSuggestion}`)
      } else {
        onSuggestionSelect(randomSuggestion)
      }
    } catch (err) {
      console.error('AI suggestion error:', err)
      setError('√ñneri olu≈üturulamadƒ±. L√ºtfen tekrar deneyin.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          disabled={loading}
          className="h-6 w-6 sm:h-7 sm:w-7 text-muted-foreground hover:text-foreground dark:text-white/70 dark:hover:text-white transition-all duration-200 hover:scale-110"
        >
          {loading ? (
            <Loader2 className="h-3 w-3 animate-spin" />
          ) : (
            <Sparkles className="h-3 w-3 transition-transform duration-200 hover:rotate-12" />
          )}
          <span className="sr-only">AI √∂nerisi al</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="start" className="w-56">
        <div className="px-2 py-1.5 text-xs font-semibold text-muted-foreground">
          AI G√∂nderi √ñnerileri
        </div>
        {SUGGESTION_PROMPTS.map((item) => (
          <DropdownMenuItem
            key={item.label}
            onClick={() => generateSuggestion(item.prompt)}
            disabled={loading}
            className="cursor-pointer"
          >
            <Sparkles className="mr-2 h-4 w-4" />
            <span>{item.label}</span>
          </DropdownMenuItem>
        ))}
        {error && (
          <div className="px-2 py-1.5 text-xs text-red-500">
            {error}
          </div>
        )}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

